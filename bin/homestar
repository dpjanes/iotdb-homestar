#!/usr/bin/env node
// vi:syntax=javascript

/*
 *  homestar
 *
 *  David Janes
 *  IOTDB.org
 *  2014-12-30
 *
 *  HomeStar command line control
 *
 *  Copyright [2013-2014] [David P. Janes]
 *  
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *  
 *     http://www.apache.org/licenses/LICENSE-2.0
 *  
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

"use strict";

var iotdb = require('iotdb');
var _ = iotdb.helpers;
var cfg = iotdb.cfg;

var minimist = require('minimist');
var fs = require('fs');
var path = require('path');

var bunyan = require('bunyan');
var logger = bunyan.createLogger({
    name: 'homestar',
    module: 'homestar',
});

/* for minimist */
var boolean = [
    "global",
];
var defaults = {};

var commandd = {
};

/*
 *  Load commands from the 'cmd' directory
 */
var setup_commands = function() {
    var filenames = cfg.cfg_find(null, path.join(__dirname, "commands"), /[.]js$/);
    cfg.cfg_load_js(filenames, function (paramd) {
        if (paramd.error !== undefined) {
            if (paramd.filename) {
                logger.error({
                    method: "setup_commands",
                    filename: paramd.filename,
                    error: paramd.error,
                    exception: paramd.exception,
                    cause: "HomeStar error - contact us",
                }, "error loading command");
            }

            return;
        }

        var module = paramd.doc;
        var needs = [ "command", "summary", "run" ];

        for (var ni in needs) {
            var need = needs[ni];
            if (module[need]) {
                continue;
            }

            logger.error({
                method: "setup_commands",
                filename: paramd.filename,
                error: "no 'exports." + need + "'",
                cause: "HomeStar error - contact us",
            }, "error loading command");
            return;
        }

        logger.debug({
            method: "setup_commands",
            filename: paramd.filename
        }, "found command");

        if (module.boolean) {
            boolean = boolean.concat(module.boolean);
        }
        if (module.defaults) {
            _.extend(defaults, module.defaults);
        }

        commandd[module.command] = module;

    });
};

var help = function() {
    console.log("usage: homestar <command> [optional arguments");
    console.log("");
    console.log("valid commands are:");
    console.log("");

    var cs = [];
    for (var c in commandd) {
        cs.push(c);
    }
    cs.sort();

    for (var ci in cs) {
        var c = cs[ci];
        var command = commandd[c];
        console.log("  %s: %s", c, command.summary || "");
    };

    console.log("");
    console.log("use 'homestar help <command>' for more info on a particular command");
    console.log("");
};

var help_on = function(name) {
    var command = commandd[name];
    if (!command) {
        console.log("homestar: unknown command '%s'", name);
        console.log();
        help();
        return;
    }

    command.help();
    
};

var iotdb_initd = {
    envd: {
        IOTDB_PROJECT: process.cwd()
    },
    discover: false,
    load_drivers: false,
    load_models: false,
    load_things: false,
    iotdb_thing_get: false,
    iotdb_thing_create: false
};

var run_cli = function()  {
    var ad = require('minimist')(process.argv.slice(2), {
        boolean: boolean,
        default: defaults,
    });

    try {
        fs.mkdirSync(".iotdb");
    }
    catch (err) {
    }

    if (ad._.length === 0) {
        console.log("homestar: expected a command");
        help();
        process.exit(1);
    } else if (ad._[0] === "help") {
        if (ad._.length > 1) {
            help_on(ad._[1]);
        } else {
            help();
        }
        process.exit(0);
    } else {
        var command = commandd[ad._[0]];
        if (!command) {
            console.log("homestar: unknown command '%s'", ad._[0]);
            console.log("");
            help();
            process.exit(1);
        }

        command.run(ad, iotdb_initd);
    }
};

setup_commands();
run_cli();
