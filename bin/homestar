#!/usr/bin/env node
// vi:syntax=javascript

/*
 *  homestar
 *
 *  David Janes
 *  IOTDB.org
 *  2014-12-30
 *
 *  HomeStar command line control
 *
 *  Copyright [2013-2014] [David P. Janes]
 *  
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *  
 *     http://www.apache.org/licenses/LICENSE-2.0
 *  
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

"use strict";

const iotdb = require('iotdb');
const _ = iotdb._;

const minimist = require('minimist');
const fs = require('fs');
const path = require('path');

const logger = iotdb.logger({
    name: 'homestar',
    module: 'homestar',
});

/* for minimist */
let boolean = [
    "global",
];
const defaults = {};

const commandd = {
};

/*
 *  Load commands from the 'cmd' directory
 */
const setup_commands = function() {
    const filenames = _.union(
        _.flatten(iotdb.modules().modules()
            .map(module => _.cfg.find(path.join(module.module_folder, "commands"), /[.]js$/))),
        _.cfg.find(path.join(process.cwd(), "node_modules", "homestar", "bin", "commands"), /[.]js$/),
        _.cfg.find(path.join(__dirname, "commands"), /[.]js$/),
        _.cfg.modules().map(md => md.path)
    );

    _.cfg.load.js(filenames, function (paramd) {
        if (paramd.error) {
            logger.error({
                method: "setup_commands",
                filename: paramd.filename,
                error: _.error.message(paramd.error),
                exception: paramd.exception,
                cause: "HomeStar error - contact us",
                stack: paramd.exception ? paramd.exception.stack : null,
            }, "error loading command");

            return;
        }

        const module = paramd.doc;

        if (commandd[module.command]) {
            return;
        }

        if (![ "command", "summary", "run" ].find(need => module[need])) {
            return;
        }

        logger.debug({
            method: "setup_commands",
            filename: paramd.filename
        }, "found command");

        if (module.boolean) {
            boolean = boolean.concat(module.boolean);
        }
        if (module.defaults) {
            _.extend(defaults, module.defaults);
        }

        module.filename = paramd.filename;
        commandd[module.command] = module;
    });
};

const help = function() {
    console.log("usage: homestar <command> [optional arguments]");
    console.log("");
    console.log("valid commands are:");
    console.log("");

    _.keys(commandd)
        .sort()
        .map(c => commandd[c])
        .forEach(command => console.log(`  ${ command.command }: ${ command.summary || "" }`));

    console.log("");
    console.log("use 'homestar help <command>' for more info on a particular command");
    console.log("");
};

const help_on = function(name) {
    const command = commandd[name];
    if (!command) {
        console.log("homestar: unknown command '%s'", name);
        console.log();
        help();
        return;
    }

    command.help();
    
};

const iotdb_initd = {
    envd: {
        IOTDB_PROJECT: process.cwd()
    },
    discover: false,
    load_drivers: false,
    load_models: false,
    load_things: false,
    iotdb_thing_get: false,
    iotdb_thing_create: false
};

const run_cli = function()  {
    const ad = require('minimist')(process.argv.slice(2), {
        boolean: boolean,
        default: defaults,
    });

    try {
        fs.mkdirSync(".iotdb");
    }
    catch (err) {
    }

    if (ad._.length === 0) {
        console.log("homestar: expected a command");
        help();
        process.exit(1);
    } else if (ad._[0] === "help") {
        if (ad._.length > 1) {
            help_on(ad._[1]);
        } else {
            help();
        }
        process.exit(0);
    } else {
        const command = commandd[ad._[0]];
        if (!command) {
            console.log("homestar: unknown command '%s'", ad._[0]);
            console.log("");
            help();
            process.exit(1);
        }

        command.run(ad, iotdb_initd);
    }
};

// _.version.check.node();

setup_commands();
run_cli();
